
This development environment essentially "hijacks" your desktop environment, making your computer into a truly immersive development environment.
* Todo
*** Figure out
**** how to organize objects in scheme
**** how to store objects on your system in scheme
**** the syntax of how to use objects and messaging in scheme
**** how objects are stored in scheme
**** use objects or functions?
**** the relationship between objects and first class functions
**** how objects and first class functions are able to work well together
**** function oriented programming?
**** for example, how does functions like 'map' work into OO
**** figure out how mutability will work with ~set!~
**** are getters and setters OO? no
**** is MVC OO?
*** Guides
**** Style guide
**** Use of objects guide
**** Thought process of how to program guide
**** Design pattern guide
*** Error handling system
**** Errors are objects that tell that they do not understand what you are asking them to do
*** Class "browser" like in Smalltalk


Objects should be simple in how we use them, not promote complexity.

It's not the idea that's bad, it's just how most people use it.

Don't make a class just for the sake of making a class. Don't make a class just because you have a new idea in the system. Make a class when you need grouped data and/or functionality.

Just because something is organized doesn't mean it's easy to use.

"OO is not about objects, it's about messages." A message is just a function call. OO is just about functions?



What's the difference between a class and a function?
With a class it's just a function that stores data. Does that data need to be stored?

Are the use cases of every class just used for a function that needs to store data?

Maybe, don't ever use classes, use closures?

Example: a functionality to access a database can be simplified by using a singleton class or a closed function.
Both would store the necessary database connect info so it's not needed to be input every time. If all you need to do is use that one function, then a closure is nice. But if you need many functions to act on that data, then a class becomes much better.



Now, what's the difference between coupled and uncoupled data?
Example:
~db.connect()~ vs ~connect(db)~

Is it just syntax? Is it a mentality?

It's different:
While it is mostly syntax, with one the class "owns" the function, and the other the class does not. This gives the function access to the inside parts of the class whereas with the other the function is limited to using the class by it's public interface. Less encapsulation/information hiding with the unowned version.

Need to come up with way to call method as in the normal function syntax, but still have access to private data?
But with a separate syntax it might be a clue to using encapsulated data?
But does the user really care about the distinction?

Everything you can do with one, you can do with the other. It's just a matter of encapsulation.

Java and C++ choose to make the distinction between methods and functions through syntax. But is there a need?
No. It may make it clearer for the programmer as what's a method and what's a function. But in a true OO language there is no distinction. Languages may make this distinction as it's easier to parse. There is no need for dispatching. And it is clear that a method belongs to that object. But if you think of every function call as a message, then there is no difference. If however you implement methods to have syntax of functions, dispatching is required.


Pros and Cons of both object-orientation and primitives


Examples of OO benefits:
- Database connection (a singleton class that stores the connection info and handles complex communication logic)
- Information hiding (encapsulation)
- Increases productivity with less rewriting code and easier refactorization


Examples of OO annoyances:
- Arithmetic
i.e.
 ~5.+(7)~ instead of just ~5 + 7~
~5.max(7)~ instead of just ~max(5 7)~
these are unnatural, or are they?
- Sometimes spend too much time in the abstraction instead of just doing
but is this just an example of bad OO?
- Can be more verbose



*Pros and Cons of Universal Naming Style*
i.e. ~(ref lst 4)~ vs ~(list-ref lst 4)~
Pros of universal naming:
- Very flexible with refactoring
- Don't need to memorize a lot of names
- Dispatches over many different types (handles dispatching internally
- Can be used in many situations, potentially sorting code
- More readable in the sense that it is less verbose (the type is not on the screen)
Example:
~(ref x 4)~
vs
~(cond ((array? x) (array-ref x 4))~
~((list? x) (list-ref x 4))~
~(else (error "Wrong type")))~
- Can potentially handle errors better
- Easy to deal with inheritance overriding methods
Pro of type-specific naming:
- Strict with types
- Consistent
- Simple
- Does not need to redefine parts of the language (more transferable to other users)
- Potentially more consistent (the dispatching version might be inconstant with its behavior over types)
- More readable in the sense that the type is explicit (you know exactly what type to expect and what is going on)
- Doesn't need to redefine most of the built-in methods
- Doesn't deal with naming problems with dispatching
- Is clear that the code that will be performed is unique to that specific type
- Clear and easy to use with recursion


OO is about modularity. Not everything needs to be an object. Just everything you do should be consistent. Primitives are fine. However, although numbers in scheme are not objects by definition (they don't bundle data and behavior together), by usage it's similar to the goal of OO because they are completely modular (the internal logic and data of each number cannot be accessed from outside the number) (nothing can rely on the internal logic of arithmetic).

Primitives are fine because by definition they are modular. If something is a primitive, it means that the language has implemented the details and data for it within the language definition. You cannot access the raw data or implementation details for primitives. Your code cannot rely on the internal implementation details of primitives. Therefore primitives are modular and fit within the OO paradigm. Whether primitives should follow the same syntax as the rest of the language is up for debate, but primitives fit the purpose of OO (modularity).



Don't ever set a value that was returned by another function. This can lead to changing values inside black boxes without using the appropriate messaging and breaking your program by stepping over encapsulation boundaries.


Scheme functions that have problems being overridden:
- display
- set!
- set-car!
- set-cdr!
- display
- print
- equal?


Do not override primitive functions, such as
- cons
- eq?, eqv?, equal?
- display, print
- set!, set-car!, set-cdr!
